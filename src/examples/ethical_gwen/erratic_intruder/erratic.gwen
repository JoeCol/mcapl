:name: executive

:Ethical Policy:

E(flightPhase(emergAvoid), doNotViolateRoADetectAvoidTurnRight, 2)
E(flightPhase(emergAvoid), doNotViolateRoA500Feet, 2)
E(flightPhase(emergAvoid), doNotCollideObjectsOnGround, 3)
E(flightPhase(emergAvoid), doNotCollideAircraft, 4)

:Initial Beliefs:

flightPhase(cruise)

:Reasoning Rules:

avoid_collision :- ~ das(intruder, headOn);
// avoid_collision :- missionComplete;
// avoid_collision :- flightPhase(cruise);


other_choices_violated(T) :- ~ untried_plan_not_violates(T);
an_ethic_in(P, [Eth|T]) :- ethics_of(P, Eth) [ethics];
an_ethic_in(P, [Eth|T]) :- an_ethic_in(P, T);
un_tried_plan :- applicable(P) [applicable_plans], ~ already_tried(P);
untried_plan(P) :- applicable(P) [applicable_plans], ~ already_tried(P);
some_applicable :- applicable(P) [applicable_plans];
some_plan_tried :- already_tried(P);
untried_plan_not_violates(T) :- untried_plan(P), ~ an_ethic_in(P, T);

:Initial Goals:

startup [perform]

:Plans:

+!startup [perform]: {True} <- +! missionComplete [achieve];

// DAS (detect and avoid sensor) is polled
+!missionComplete [achieve] : {B flightPhase(cruise) } <-
 *missionComplete;
+!missionComplete [achieve] : {B flightPhase(emergAvoid) } <-
 *missionComplete;
+!avoid_collision [achieve] : {B flightPhase(emergAvoid), ~B route(emergAvoid, Route)} <-
   plan(reqEmergRoute,turnRight), 
   *route(emergAvoid, R),
   enactRoute(R),
   wait;
   
 +das(intruder, headOn) : {B flightPhase(cruise)} <-
  +.lock,
  -flightPhase(cruise), 
  +flightPhase(emergAvoid), 
  -.lock,
  +! avoid_collision [achieve];
  
-das(intruder, headOn) : {B flightPhase(emergAvoid)} <-
  +.lock,
  -flightPhase(emergAvoid),
  +flightPhase(cruise),
  -.lock;