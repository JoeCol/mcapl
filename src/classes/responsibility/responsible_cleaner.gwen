GWENDOLEN

:name: res_cleaner

:Initial Beliefs:
responsibilities([cleanRequest(1),cleanRequest(4),cleanRequest(5)])

:Reasoning Rules:
have_responsibility(X) :- responsibilities([X|T]), ~X;  

:Initial Goals:
cleaning [achieve]

:Plans: 

+!cleaning [achieve]: {B cleanRequest(Z), B zone(Z), B cleaned(Z)} <- +.lock, -cleanRequest(Z), finishCleaning(Z), -.lock;
+!cleaning [achieve]: {B cleanRequest(Z), B zone(Z), ~B cleaned(Z), B at(X,Y)} <- +.lock, do_clean(Z, X, Y), -.lock;
+!cleaning [achieve]: {B cleanRequest(Z), ~B zone(Z), B at(X,Y)} <- +.lock, go_to_zone(Z,X,Y), -.lock;

+!cleaning [achieve]: {B have_responsibility(Z), B at(X,Y), B responsibilities(H), B responsibilities([E|T])} <- +.lock, +Z, -responsibilities(H), +responsibilities(T), print(H), print(Z), -.lock;
+!cleaning [achieve]: {~B have_responsibility(Z), B at(X,Y)} <- +.lock, print("Finished"), +responsibilities([cleanRequest(1),cleanRequest(4),cleanRequest(5)]), -.lock;
