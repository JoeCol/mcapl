GWENDOLEN

:name: manager

:Initial Beliefs:
//Possible Tasks task(name, [goals/actions], [statesOfTheWorld])
task(cleanroomA, [cleanroomA], [])
task(cleanroomB, [cleanroomB], [])
task(cleanroomC, [cleanroomC], [])
task(cleanroomD, [cleanroomD], [])
task(cleanroomE, [cleanroomE], [])
task(cleanroomF, [cleanroomF], [])
task(cleanroomG, [cleanroomG], [])
task(cleanroomH, [cleanroomH], [])
task(cleanroomI, [cleanroomI], [])
task(cleanroomJ, [cleanroomJ], [])
task(cleanroomK, [cleanroomK], [])
task(cleanroomL, [cleanroomL], [])
task(cleanroomM, [cleanroomM], [])
task(cleanroomN, [cleanroomN], [])
task(cleanroomO, [cleanroomO], [])

task(observeA, [observeA], [])
task(observeB, [observeB], [])
task(observeC, [observeC], [])
task(observeD, [observeD], [])
task(observeE, [observeE], [])
task(observeF, [observeF], [])
task(observeG, [observeG], [])
task(observeH, [observeH], [])
task(observeI, [observeI], [])
task(observeJ, [observeJ], [])
task(observeK, [observeK], [])
task(observeL, [observeL], [])
task(observeM, [observeM], [])
task(observeN, [observeN], [])
task(observeO, [observeO], [])

task(sendToHuman, [sendToHuman], [])
task(checkDirtLevel,[],[ensureLowDirt])
 
//Possible Responsibilities res(name, [subres], task, [failres], {oneshot,repeat})
res(reportHuman, [], sendToHuman, [], oneshot)

res(cleanA, [], cleanroomA, [], repeat)
res(cleanB, [], cleanroomB, [], repeat)
res(cleanC, [], cleanroomC, [], repeat)
res(cleanD, [], cleanroomD, [], repeat)
res(cleanE, [], cleanroomE, [], repeat)
res(cleanF, [], cleanroomF, [], repeat)
res(cleanG, [], cleanroomG, [], repeat)
res(cleanH, [], cleanroomH, [], repeat)
res(cleanI, [], cleanroomI, [], repeat)
res(cleanJ, [], cleanroomJ, [], repeat)
res(cleanK, [], cleanroomK, [], repeat)
res(cleanL, [], cleanroomL, [], repeat)
res(cleanM, [], cleanroomM, [], repeat)
res(cleanN, [], cleanroomN, [], repeat)
res(cleanO, [], cleanroomO, [], repeat)

res(observeA, [], observeA, [], repeat)
res(observeB, [], observeB, [], repeat)
res(observeC, [], observeC, [], repeat)
res(observeD, [], observeD, [], repeat)
res(observeE, [], observeE, [], repeat)
res(observeF, [], observeF, [], repeat)
res(observeG, [], observeG, [], repeat)
res(observeH, [], observeH, [], repeat)
res(observeI, [], observeI, [], repeat)
res(observeJ, [], observeJ, [], repeat)
res(observeK, [], observeK, [], repeat)
res(observeL, [], observeL, [], repeat)
res(observeM, [], observeM, [], repeat)
res(observeN, [], observeN, [], repeat)
res(observeO, [], observeO, [], repeat)

res(cleanBadDirtA, [], cleanroomA, [], repeat)
res(cleanBadDirtB, [], cleanroomB, [], repeat)
res(cleanBadDirtC, [], cleanroomC, [], repeat)
res(cleanBadDirtD, [], cleanroomD, [], repeat)
res(cleanBadDirtE, [], cleanroomE, [], repeat)
res(cleanBadDirtF, [], cleanroomF, [], repeat)
res(cleanBadDirtG, [], cleanroomG, [], repeat)
res(cleanBadDirtH, [], cleanroomH, [], repeat)
res(cleanBadDirtI, [], cleanroomI, [], repeat)
res(cleanBadDirtJ, [], cleanroomJ, [], repeat)
res(cleanBadDirtK, [], cleanroomK, [], repeat)
res(cleanBadDirtL, [], cleanroomL, [], repeat)
res(cleanBadDirtM, [], cleanroomM, [], repeat)
res(cleanBadDirtN, [], cleanroomN, [], repeat)
res(cleanBadDirtO, [], cleanroomO, [], repeat)

res(janitorial,[safety,cleanliness],none,[],repeat)
res(safety,[cleanBadDirtA,cleanBadDirtB,cleanBadDirtC,cleanBadDirtD,cleanBadDirtE,cleanBadDirtF,cleanBadDirtG,cleanBadDirtH,cleanBadDirtI,cleanBadDirtJ,cleanBadDirtK,cleanBadDirtL,cleanBadDirtM,cleanBadDirtN,cleanBadDirtO],checkDirtLevel,[reportHuman],repeat)
res(cleanliness,[observe,clean],none,[],repeat)
res(observe,[observeA,observeB,observeC,observeD,observeE,observeF,observeG,observeH,observeI,observeJ,observeK,observeL,observeM,observeN,observeO],none,[],repeat)
res(clean,[cleanA,cleanB,cleanC,cleanD,cleanE,cleanF,cleanG,cleanH,cleanI,cleanJ,cleanK,cleanL,cleanM,cleanN,cleanO],none,[],repeat)

//care values
care(cleanA,1)
care(cleanBadDirtA,2)
care(cleanB,1)
care(cleanBadDirtB,2)
care(cleanC,1)
care(cleanBadDirtC,2)
care(cleanD,1)
care(cleanBadDirtD,2)
care(cleanE,1)
care(cleanBadDirtE,2)
care(cleanF,1)
care(cleanBadDirtF,2)
care(cleanG,1)
care(cleanBadDirtG,2)
care(cleanH,1)
care(cleanBadDirtH,2)
care(cleanI,1)
care(cleanBadDirtI,2)
care(cleanJ,1)
care(cleanBadDirtJ,2)
care(cleanK,1)
care(cleanBadDirtK,2)
care(cleanL,1)
care(cleanBadDirtL,2)
care(cleanM,1)
care(cleanBadDirtM,2)
care(cleanN,1)
care(cleanBadDirtN,2)
care(cleanO,1)
care(cleanBadDirtO,2)

care(observeA,5)
care(observeB,5)
care(observeC,5)
care(observeD,5)
care(observeE,5)
care(observeF,5)
care(observeG,5)
care(observeH,5)
care(observeI,5)
care(observeJ,5)
care(observeK,5)
care(observeL,5)
care(observeM,5)
care(observeN,5)
care(observeO,5)

care(report,100)
care(safety,500)
care(janitorial,1000)
care(cleanliness,400)
care(observe,8)
care(clean,4)

//Capacity - In essence pre-computed
capacity(cleanA)
capacity(cleanBadDirtA)
capacity(cleanB)
capacity(cleanBadDirtB)
capacity(cleanC)
capacity(cleanBadDirtC)
capacity(cleanD)
capacity(cleanBadDirtD)
capacity(cleanE)
capacity(cleanBadDirtE)
capacity(cleanF)
capacity(cleanBadDirtF)
capacity(cleanG)
capacity(cleanBadDirtG)
capacity(cleanH)
capacity(cleanBadDirtH)
capacity(cleanI)
capacity(cleanBadDirtI)
capacity(cleanJ)
capacity(cleanBadDirtJ)
capacity(cleanK)
capacity(cleanBadDirtK)
capacity(cleanL)
capacity(cleanBadDirtL)
capacity(cleanM)
capacity(cleanBadDirtM)
capacity(cleanN)
capacity(cleanBadDirtN)
capacity(cleanO)
capacity(cleanBadDirtO)

capacity(reportHuman)
capacity(observeA)
capacity(observeB)
capacity(observeC)
capacity(observeD)
capacity(observeE)
capacity(observeF)
capacity(observeG)
capacity(observeH)
capacity(observeI)
capacity(observeJ)
capacity(observeK)
capacity(observeL)
capacity(observeM)
capacity(observeN)
capacity(observeO)

capacity(report)
capacity(safety)
capacity(janitorial)
capacity(cleanliness)
capacity(observe)
capacity(clean)

free(cleaner1)
free(cleaner2)

prev(cleaner1)

//Current Responsibilities
responsibilities([])
workingOn([])

:Reasoning Rules:
allTasks([],[]);
allTasks([H|T], [Tasks|OtherTasks]) :- res(H, _, Name, _, _), task(Name,[Tasks],_), allTasks(T,OtherTasks);

resIn(Res,[],false);
resIn(H,[H],true);
resIn(H,[H|T],true);
resIn(H,[H1|T],Out) :- resIn(H,T,Out);

freeAgent(cleaner1) :- free(cleaner1);
freeAgent(cleaner2) :- free(cleaner2);

nextAgent(cleaner1) :- prev(cleaner2);
nextAgent(cleaner2) :- prev(cleaner1);

:Initial Goals:
startup[perform]
//test(1)[perform]

:Plans:
+!startup[perform] : {True} <- .send(manager,:tell,assignment(initial,janitorial)), +!delegate(report,cleaner1)[perform], +!delegate(report,cleaner2)[perform], +!preRes[achieve];

//Received a delegated responsibility Example: assignment([ag1,ag2],safety)
+.received(:tell, assignment(Assignee,Res)) : {True} <- prt("Received Assignment ", Res), -actionReady, +.lock, +!processRes(Assignee,[Res])[perform], -.lock, +actionReady;
+.received(:tell, accepted(Res,Assignee)) : {True} <- prt("Received ", accepted(Res,Assignee)), -waiting(Res,Assignee), +delegated(Res,Assignee);
+.received(:tell, finished(Res)) : {True} <- +.lock, +!finishRes(Res)[perform], -.lock, +actionReady;
+.received(:tell, finished(Res,Ag)) : {True} <- +.lock, +!finishRes(Res)[perform], -delegated(Res,Ag), -.lock, +actionReady;
+.received(:tell, failed(Res)) : {True} <- +.lock, +!failedRes(Res)[perform], -.lock, +actionReady;

+.received(:tell, observed(Zone,_,_,true)) : {True} <- -dirt(Zone), -badDirt(Zone), +clear(Zone);
+.received(:tell, observed(Zone,_,true,_)) : {True}  <- +dirt(Zone), +badDirt(Zone), -clear(Zone);
+.received(:tell, observed(Zone,true,_,_)) : {True}  <- +dirt(Zone), -badDirt(Zone), -clear(Zone);
				  
+.received(:tell, busy(A,true)) : {True} <- -free(A), prt("Busy ",A);
+.received(:tell, busy(A,false)) : {True} <- +free(A), prt("Free ",A);

+.received(:tell, A) : {True} <- prt("Received Unknown Message ",A);
//Test getting tasks
//+!test[perform] : {B allTasks([report,cleanA,cleanB,cleanBadDirtC,cleanBadDirtA],Out)} <- prt(Out);

//+!test(1)[perform] : {B resInFin(cleanA,[report,cleanA],true)} <- prt("Works for last item"), +!test(2)[perform];
//+!test(2)[perform] : {B resInFin(cleanB,[report,cleanA],false)} <- prt("Works for false"), +!test(3)[perform];
//+!test(3)[perform] : {B resInFin(cleanB,[report,cleanA],A)} <- prt("Result ", A), +!test(4)[perform];
//+!test(4)[perform] : {B resInFin(cleanA,[report,cleanA],A)} <- prt("Result ", A);

//Resent the assignment to myself for responsibilities that repeat
+!resendRes(Res)[perform] : {B assignment(Assignee,Res)} <- getName(Name), .send(Name, :tell, assignment(Assignee,Res));

//Finish Res
+!finishRes([])[perform] : {True} <- prt("Finished Res Processing Finished");
+!finishRes(Res)[perform] : {B res(Res,_,_,_,oneshot)} <- +!remRes(Res)[perform], +!remWrk(Res)[perform]; 
+!finishRes(Res)[perform] : {B res(Res,_,_,_,repeat)} <- +!remRes(Res)[perform], +!remWrk(Res)[perform], +!resendRes(Res)[perform]; 
+!finishRes(Res)[perform] : {True} <- prt("Res not done"); 

+!failedRes(Res)[perform] : {True} <- prt("Res failed"), +!remList(Res)[perform], +!remWrk(Res)[perform]; 

+!do(Res,[])[perform] : {True} <- prt("All actions done ", Res);
+!do(Res,[H|T])[perform] : {B workingOn(Wrk), B resIn(Res,Wrk,true)} <- prt("Working On");
+!do(Res,[H|T])[perform] : {B actionReady} <- +!action(Res,H)[perform], +!do(Res,T)[perform];
+!do(Res,[H|T])[perform] : {~B actionReady} <- prt("Interrupted");

//Do responsibility
+!doRes([])[perform] : {True} <- prt("done all res");
+!doRes([H|T])[perform] : {B actionReady, B res(H,_,none,_,_)} <- prt("No task with ", H), +!doRes(T)[perform];
+!doRes([H|T])[perform] : {B actionReady, B res(H,_,TName,_,_), B task(TName,[Task],[State])} <- +!do(H,[Task|State])[perform], +!doRes(T)[perform];
+!doRes([H|T])[perform] : {B actionReady, B res(H,_,TName,_,_), B task(TName,Task,[])} <- +!do(H,Task)[perform], +!doRes(T)[perform];
+!doRes([H|T])[perform] : {B actionReady, B res(H,_,TName,_,_), B task(TName,[],State)} <- +!do(H, State)[perform], +!doRes(T)[perform];
+!doRes([H|T])[perform] : {~B actionReady} <- prt("Interrupted");

//Prepare task list
+!preRes[achieve] : {~B actionReady} <- prt("Waiting"), *actionReady;
+!preRes[achieve] : {B actionReady, B responsibilities([])} <- prt("No Res to do"), -actionReady;
+!preRes[achieve] : {B actionReady, B responsibilities(Res)} <- prt("Now Ready"), getViable(Res,Viable), prt(Viable), selectCared(Viable,Out), prt(Out), +!doRes(Out)[perform], -actionReady;

//Manage lists
+!addRes(Res)[perform] : {B responsibilities(L)} <- +.lock, -responsibilities(L), addResItem(Res,L,Out), +responsibilities(Out), -.lock;
+!remRes(Res)[perform] : {B responsibilities(L)} <- +.lock, -responsibilities(L), deleteItem(Res,L,Out), +responsibilities(Out), -.lock;
+!addWrk(Res)[perform] : {B workingOn(L)} <- +.lock, -workingOn(L), addItem(Res,L,Out), +workingOn(Out), -.lock;
+!remWrk(Res)[perform] : {B workingOn(L)} <- +.lock, -workingOn(L), deleteItem(Res,L,Out), +workingOn(Out), -.lock;

//Add new responsibility
+!incomingRes(Assignee,[Res])[perform] : {B capacity(Res)} <- prt("Accepting ", Res), +.lock, +assignment(Assignee,Res), +!addRes(Res)[perform], +!reportOutcome(yes,Assignee,Res)[perform], -.lock;
+!incomingRes(Assignee,[Res])[perform] : {~B capacity(Res)} <- prt("Rejecting ", Res), +!reportOutcome(no,Assignee,Res)[perform];

+!processRes(Assignee,[])[perform] : {B responsibilities(H)} <- prt("Processed Res have ", H);
+!processRes(Assignee,[Res])[perform] : {B res(Res,[],_,_,_)} <- +!incomingRes(Assignee,[Res])[perform];
+!processRes(Assignee,[Res|T])[perform] : {B res(Res,SubRes,_,_,_)} <- +!incomingRes(Assignee,[Res])[perform], +!processRes(Assignee,T)[perform], +!processRes(Assignee,SubRes)[perform];
//+!processRes(Assignee,[Res])[perform] : {B res(Res,SubRes,_,_,_)} <- +!incomingRes(Assignee,[Res])[perform], +!processRes(Assignee,SubRes)[perform];

//Messages to send back
+!reportOutcome(_, [], Res)[perform] : {True} <- prt("Reported accepted to all");
+!reportOutcome(yes, [Assignee|T], Res)[perform] : {True} <- .send(Assignee, :tell, accepted(Res, cleaner)), +!reportOutcome(yes,T,Res)[perform];
+!reportOutcome(yes, Assignee, Res)[perform] : {True} <- .send(Assignee, :tell, accepted(Res, cleaner));
+!reportOutcome(no, [Assignee|T], Res)[perform] : {True} <- .send(Assignee, :tell, rejected(Res, cleaner)), +!reportOutcome(yes,T,Res)[perform];
+!reportOutcome(no, Assignee, Res)[perform] : {True} <- .send(Assignee, :tell, rejected(Res, cleaner));

//Delegate responsibilitiy
+!delegate(report,Ag)[perform] : {True} <- prt("Delegating Report"), .send(Ag, :tell, assignment(manager,report));
+!delegate(Res,Ag)[perform] : {True} <- prt("Delegating"), .send(Ag, :tell, assignment(manager,Res)), +prev(Ag);

+prev(cleaner1) : {True} <- -prev(cleaner2), prt("Prev changed to c2");
+prev(cleaner2) : {True} <- -prev(cleaner1), prt("Prev changed to c1");

//Specific Actions & states
+!action(Res,cleanroomA)[perform] : {B freeAgent(Ag), ~B delegated(Res,_)} <- +!delegate(Res,Ag)[perform], assumeClean("A"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomB)[perform] : {B freeAgent(Ag), ~B delegated(Res,_)} <- +!delegate(Res,Ag)[perform], assumeClean("B"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomC)[perform] : {B freeAgent(Ag), ~B delegated(Res,_)} <- +!delegate(Res,Ag)[perform], assumeClean("C"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomD)[perform] : {B freeAgent(Ag), ~B delegated(Res,_)} <- +!delegate(Res,Ag)[perform], assumeClean("D"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomE)[perform] : {B freeAgent(Ag), ~B delegated(Res,_)} <- +!delegate(Res,Ag)[perform], assumeClean("E"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomF)[perform] : {B freeAgent(Ag), ~B delegated(Res,_)} <- +!delegate(Res,Ag)[perform], assumeClean("F"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomG)[perform] : {B freeAgent(Ag), ~B delegated(Res,_)} <- +!delegate(Res,Ag)[perform], assumeClean("G"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomH)[perform] : {B freeAgent(Ag), ~B delegated(Res,_)} <- +!delegate(Res,Ag)[perform], assumeClean("H"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomI)[perform] : {B freeAgent(Ag), ~B delegated(Res,_)} <- +!delegate(Res,Ag)[perform], assumeClean("I"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomJ)[perform] : {B freeAgent(Ag), ~B delegated(Res,_)} <- +!delegate(Res,Ag)[perform], assumeClean("J"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomJ)[perform] : {B freeAgent(Ag), ~B delegated(Res,_)} <- +!delegate(Res,Ag)[perform], assumeClean("K"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomJ)[perform] : {B freeAgent(Ag), ~B delegated(Res,_)} <- +!delegate(Res,Ag)[perform], assumeClean("L"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomJ)[perform] : {B freeAgent(Ag), ~B delegated(Res,_)} <- +!delegate(Res,Ag)[perform], assumeClean("M"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomJ)[perform] : {B freeAgent(Ag), ~B delegated(Res,_)} <- +!delegate(Res,Ag)[perform], assumeClean("N"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomJ)[perform] : {B freeAgent(Ag), ~B delegated(Res,_)} <- +!delegate(Res,Ag)[perform], assumeClean("O"), .send(manager,:tell,finished(Res));

+!action(Res,cleanroomA)[perform] : {B badDirt(a), ~B delegated(Res,_)} <- prt("Clean it myself"), clearActions, doing(Res), goToZone("A"), clean("A"), assumeClean("A"), addFin;
+!action(Res,cleanroomB)[perform] : {B badDirt(b), ~B delegated(Res,_)} <- prt("Clean it myself"), clearActions, doing(Res), goToZone("B"), clean("B"), assumeClean("B"), addFin;
+!action(Res,cleanroomC)[perform] : {B badDirt(c), ~B delegated(Res,_)} <- prt("Clean it myself"), clearActions, doing(Res), goToZone("C"), clean("C"), assumeClean("C"), addFin;
+!action(Res,cleanroomD)[perform] : {B badDirt(d), ~B delegated(Res,_)} <- prt("Clean it myself"), clearActions, doing(Res), goToZone("D"), clean("D"), assumeClean("D"), addFin;
+!action(Res,cleanroomE)[perform] : {B badDirt(e), ~B delegated(Res,_)} <- prt("Clean it myself"), clearActions, doing(Res), goToZone("E"), clean("E"), assumeClean("E"), addFin;
+!action(Res,cleanroomF)[perform] : {B badDirt(f), ~B delegated(Res,_)} <- prt("Clean it myself"), clearActions, doing(Res), goToZone("F"), clean("F"), assumeClean("F"), addFin;
+!action(Res,cleanroomG)[perform] : {B badDirt(g), ~B delegated(Res,_)} <- prt("Clean it myself"), clearActions, doing(Res), goToZone("G"), clean("G"), assumeClean("G"), addFin;
+!action(Res,cleanroomH)[perform] : {B badDirt(h), ~B delegated(Res,_)} <- prt("Clean it myself"), clearActions, doing(Res), goToZone("H"), clean("H"), assumeClean("H"), addFin;
+!action(Res,cleanroomI)[perform] : {B badDirt(i), ~B delegated(Res,_)} <- prt("Clean it myself"), clearActions, doing(Res), goToZone("I"), clean("I"), assumeClean("I"), addFin;
+!action(Res,cleanroomJ)[perform] : {B badDirt(j), ~B delegated(Res,_)} <- prt("Clean it myself"), clearActions, doing(Res), goToZone("J"), clean("J"), assumeClean("J"), addFin;
+!action(Res,cleanroomK)[perform] : {B badDirt(k), ~B delegated(Res,_)} <- prt("Clean it myself"), clearActions, doing(Res), goToZone("K"), clean("K"), assumeClean("K"), addFin;
+!action(Res,cleanroomL)[perform] : {B badDirt(l), ~B delegated(Res,_)} <- prt("Clean it myself"), clearActions, doing(Res), goToZone("L"), clean("L"), assumeClean("L"), addFin;
+!action(Res,cleanroomM)[perform] : {B badDirt(m), ~B delegated(Res,_)} <- prt("Clean it myself"), clearActions, doing(Res), goToZone("M"), clean("M"), assumeClean("M"), addFin;
+!action(Res,cleanroomN)[perform] : {B badDirt(n), ~B delegated(Res,_)} <- prt("Clean it myself"), clearActions, doing(Res), goToZone("N"), clean("N"), assumeClean("N"), addFin;
+!action(Res,cleanroomO)[perform] : {B badDirt(o), ~B delegated(Res,_)} <- prt("Clean it myself"), clearActions, doing(Res), goToZone("O"), clean("O"), assumeClean("O"), addFin;

+!action(Res,cleanroomA)[perform] : {B nextAgent(Ag), ~B delegated(Res,_)} <- prt("next agent"), +!delegate(Res,Ag)[perform], assumeClean("A"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomB)[perform] : {B nextAgent(Ag), ~B delegated(Res,_)} <- prt("next agent"), +!delegate(Res,Ag)[perform], assumeClean("B"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomC)[perform] : {B nextAgent(Ag), ~B delegated(Res,_)} <- prt("next agent"), +!delegate(Res,Ag)[perform], assumeClean("C"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomD)[perform] : {B nextAgent(Ag), ~B delegated(Res,_)} <- prt("next agent"), +!delegate(Res,Ag)[perform], assumeClean("D"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomE)[perform] : {B nextAgent(Ag), ~B delegated(Res,_)} <- prt("next agent"), +!delegate(Res,Ag)[perform], assumeClean("E"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomF)[perform] : {B nextAgent(Ag), ~B delegated(Res,_)} <- prt("next agent"), +!delegate(Res,Ag)[perform], assumeClean("F"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomG)[perform] : {B nextAgent(Ag), ~B delegated(Res,_)} <- prt("next agent"), +!delegate(Res,Ag)[perform], assumeClean("G"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomH)[perform] : {B nextAgent(Ag), ~B delegated(Res,_)} <- prt("next agent"), +!delegate(Res,Ag)[perform], assumeClean("H"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomI)[perform] : {B nextAgent(Ag), ~B delegated(Res,_)} <- prt("next agent"), +!delegate(Res,Ag)[perform], assumeClean("I"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomJ)[perform] : {B nextAgent(Ag), ~B delegated(Res,_)} <- prt("next agent"), +!delegate(Res,Ag)[perform], assumeClean("J"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomK)[perform] : {B nextAgent(Ag), ~B delegated(Res,_)} <- prt("next agent"), +!delegate(Res,Ag)[perform], assumeClean("K"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomL)[perform] : {B nextAgent(Ag), ~B delegated(Res,_)} <- prt("next agent"), +!delegate(Res,Ag)[perform], assumeClean("L"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomM)[perform] : {B nextAgent(Ag), ~B delegated(Res,_)} <- prt("next agent"), +!delegate(Res,Ag)[perform], assumeClean("M"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomN)[perform] : {B nextAgent(Ag), ~B delegated(Res,_)} <- prt("next agent"), +!delegate(Res,Ag)[perform], assumeClean("N"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomO)[perform] : {B nextAgent(Ag), ~B delegated(Res,_)} <- prt("next agent"), +!delegate(Res,Ag)[perform], assumeClean("O"), .send(manager,:tell,finished(Res));

+!action(Res,cleanroomA)[perform] : {True} <- prt("Already delegated"), assumeClean("A"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomB)[perform] : {True} <- prt("Already delegated"), assumeClean("B"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomC)[perform] : {True} <- prt("Already delegated"), assumeClean("C"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomD)[perform] : {True} <- prt("Already delegated"), assumeClean("D"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomE)[perform] : {True} <- prt("Already delegated"), assumeClean("E"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomF)[perform] : {True} <- prt("Already delegated"), assumeClean("F"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomG)[perform] : {True} <- prt("Already delegated"), assumeClean("G"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomH)[perform] : {True} <- prt("Already delegated"), assumeClean("H"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomI)[perform] : {True} <- prt("Already delegated"), assumeClean("I"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomJ)[perform] : {True} <- prt("Already delegated"), assumeClean("J"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomK)[perform] : {True} <- prt("Already delegated"), assumeClean("K"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomL)[perform] : {True} <- prt("Already delegated"), assumeClean("L"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomM)[perform] : {True} <- prt("Already delegated"), assumeClean("M"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomN)[perform] : {True} <- prt("Already delegated"), assumeClean("N"), .send(manager,:tell,finished(Res));
+!action(Res,cleanroomO)[perform] : {True} <- prt("Already delegated"), assumeClean("O"), .send(manager,:tell,finished(Res));

+!action(Res,observeA)[perform] : {True} <- clearActions, doing(Res), goToZone("A"), observe("A"), addFin;
+!action(Res,observeB)[perform] : {True} <- clearActions, doing(Res), goToZone("B"), observe("B"), addFin;
+!action(Res,observeC)[perform] : {True} <- clearActions, doing(Res), goToZone("C"), observe("C"), addFin;
+!action(Res,observeD)[perform] : {True} <- clearActions, doing(Res), goToZone("D"), observe("D"), addFin;
+!action(Res,observeE)[perform] : {True} <- clearActions, doing(Res), goToZone("E"), observe("E"), addFin;
+!action(Res,observeF)[perform] : {True} <- clearActions, doing(Res), goToZone("F"), observe("F"), addFin;
+!action(Res,observeG)[perform] : {True} <- clearActions, doing(Res), goToZone("G"), observe("G"), addFin;
+!action(Res,observeH)[perform] : {True} <- clearActions, doing(Res), goToZone("H"), observe("H"), addFin;
+!action(Res,observeI)[perform] : {True} <- clearActions, doing(Res), goToZone("I"), observe("I"), addFin;
+!action(Res,observeJ)[perform] : {True} <- clearActions, doing(Res), goToZone("J"), observe("J"), addFin;
+!action(Res,observeK)[perform] : {True} <- clearActions, doing(Res), goToZone("K"), observe("K"), addFin;
+!action(Res,observeL)[perform] : {True} <- clearActions, doing(Res), goToZone("L"), observe("L"), addFin;
+!action(Res,observeM)[perform] : {True} <- clearActions, doing(Res), goToZone("M"), observe("M"), addFin;
+!action(Res,observeN)[perform] : {True} <- clearActions, doing(Res), goToZone("N"), observe("N"), addFin;
+!action(Res,observeO)[perform] : {True} <- clearActions, doing(Res), goToZone("O"), observe("O"), addFin;

+!action(Res,ensureLowDirt)[perform] : {True} <- prt("Ensuring Low Dirt");
+!action(Res,sendStatus)[perform] : {True} <- prt("Sending report to human");
+!action(Res,AnyAction)[perform] : {True} <- prt("Action ", AnyAction, " not recognised for Res ", Res);

