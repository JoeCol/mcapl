GWENDOLEN

:name: manager

:Initial Beliefs:
//Cleaning responsibility actions
res(clean(X), delegate, agent1)
res(hoover, delegate, agent1)
res(observeDirt, observeDirt, null)

//Safety responsibility actions
res(observeSafe, observeSafe, null)

//Tree nodes for responsibilities
resTree(cleaning, [observeDirt]) //clean and hoover are implied
resTree(clean(X), [])
resTree(hoover, [])
resTree(observeDirt, [])

resTree(safety, [observeSafe])
resTree(observeSafe, [])

//List of responsibilities
todo([cleaning,safety])

:Reasoning Rules:

:Initial Goals:
resolveRes[perform]

:Plans: 

//Received a delegated responsibility
+.received(:tell, X): {True} <- +!resolveRes[perform];

//Delegate
+!delegate(X,Ags)[perform] : {True} <- .send(Ags,:tell,X);

//Responsibilty Actions
+!doRes(H)[perform] : {B res(H, delegate, Ags)} <- +!delegate(H, Ags)[perform];
+!doRes(H)[perform] : {B res(H, observeDirt, null)} <- +!observeDirt[perform];
+!doRes(H)[perform] : {B res(H, observeSafe, null)} <- +!observeSafe[perform];

//Resolve responsibility Responsibility
+!resolveRes[perform] : {B todo([H|T]), B resTree(H, [])} <- +!remRes(H)[perform], +!doRes(H)[perform], +!resolveRes[perform];
+!resolveRes[perform] : {B todo([H|T]), B resTree(H, N)} <- +!remRes(H)[perform], +!addRes(N)[perform], +!resolveRes[perform];
+!resolveRes[perform] : {B todo([])} <- print("Nothing");
+!resolveRes[perform] : {B todo(Z)} <- print("Broken on "), print(Z);

//Responsibility List Management
+!addRes(X)[perform] : {B todo(Z)} <- +.lock, -todo(Z), print(Z), print("Adding"), print(X), append(X,Z,Y), +todo(Y), -.lock;
+!remRes(X)[perform] : {B todo(Z)} <- +.lock, -todo(Z), print(Z), print("Removing"), print(X), delete(X,Z,Y), +todo(Y), -.lock;

//Observe Dirt
+!observeDirt[perform] : {B goZone(Z), B zone(Z), B dirtInZone(1)} <- -goZone(Z), +!addRes([observeDirt])[perform], +!addRes([clean(Z)])[perform];
+!observeDirt[perform] : {B goZone(Z), B zone(Z), B dirtInZone(0)} <- -goZone(Z), +!addRes([observeDirt])[perform];
+!observeDirt[perform] : {B goZone(Z), B at(X,Y)} <- go_to_zone(Z, X, Y), +!addRes([observeDirt])[perform];
+!observeDirt[perform] : {B at(X,Y)} <- getRandomZone(Z), +goZone(Z), +!addRes([observeDirt])[perform];

//Observe Safe
+!observeSafe[perform] : {True} <- print("safe"), +!addRes([observeSafe])[perform];

