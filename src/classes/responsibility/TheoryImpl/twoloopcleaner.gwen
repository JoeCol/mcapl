GWENDOLEN

:name: cleaner

:Initial Beliefs:
//Possible Tasks task(name, [goals/actions], [statesOfTheWorld])
task(cleanroomA, [cleanroomA], [])
task(cleanroomB, [cleanroomB], [])
task(cleanroomC, [cleanroomC], [])
task(cleanroomD, [cleanroomD], [])
task(cleanroomE, [cleanroomE], [])
task(cleanroomF, [cleanroomF], [])
task(cleanroomG, [cleanroomG], [])
task(cleanroomH, [cleanroomH], [])
task(cleanroomI, [cleanroomI], [])
task(cleanroomJ, [cleanroomJ], [])

task(sendStatus, [sendStatus], [])
 
//Possible Responsibilities res(name, [subres], task, [failres], {oneshot,repeat})
res(report, [], sendStatus, [], repeat)

res(cleanA, [], cleanroomA, [], oneshot)
res(cleanB, [], cleanroomB, [], oneshot)
res(cleanC, [], cleanroomC, [], oneshot)
res(cleanD, [], cleanroomD, [], oneshot)
res(cleanE, [], cleanroomE, [], oneshot)
res(cleanF, [], cleanroomF, [], oneshot)
res(cleanG, [], cleanroomG, [], oneshot)
res(cleanH, [], cleanroomH, [], oneshot)
res(cleanI, [], cleanroomI, [], oneshot)
res(cleanJ, [], cleanroomJ, [], oneshot)

res(cleanBadDirtA, [], cleanroomA, [], oneshot)
res(cleanBadDirtB, [], cleanroomB, [], oneshot)
res(cleanBadDirtC, [], cleanroomC, [], oneshot)
res(cleanBadDirtD, [], cleanroomD, [], oneshot)
res(cleanBadDirtE, [], cleanroomE, [], oneshot)
res(cleanBadDirtF, [], cleanroomF, [], oneshot)
res(cleanBadDirtG, [], cleanroomG, [], oneshot)
res(cleanBadDirtH, [], cleanroomH, [], oneshot)
res(cleanBadDirtI, [], cleanroomI, [], oneshot)
res(cleanBadDirtJ, [], cleanroomJ, [], oneshot)

//care values
care(cleanroomA,1)
care(cleanBadDirtA,10)
care(cleanroomB,1)
care(cleanBadDirtB,10)
care(cleanroomC,1)
care(cleanBadDirtC,10)
care(cleanroomD,1)
care(cleanBadDirtD,10)
care(cleanroomE,1)
care(cleanBadDirtE,10)
care(cleanroomF,1)
care(cleanBadDirtF,10)
care(cleanroomG,1)
care(cleanBadDirtG,10)
care(cleanroomH,1)
care(cleanBadDirtH,10)
care(cleanroomI,1)
care(cleanBadDirtI,10)
care(cleanroomJ,1)
care(cleanBadDirtJ,10)

care(report,100)

//Capacity - In essence pre-computed
capacity(cleanA)
capacity(cleanBadDirtA)
capacity(cleanB)
capacity(cleanBadDirtB)
capacity(cleanC)
capacity(cleanBadDirtC)
capacity(cleanD)
capacity(cleanBadDirtD)
capacity(cleanE)
capacity(cleanBadDirtE)
capacity(cleanF)
capacity(cleanBadDirtF)
capacity(cleanG)
capacity(cleanBadDirtG)
capacity(cleanH)
capacity(cleanBadDirtH)
capacity(cleanI)
capacity(cleanBadDirtI)
capacity(cleanJ)
capacity(cleanBadDirtJ)

capacity(report)


//Current Responsibilities
responsibilities([])
action([])
accepted([])
task([]) //completed tasks

//Process Loops
acceptedStage(newres)
actionStage(start)

:Reasoning Rules:
mostCared(X,Y,X) :- care(X,X1), care(Y,Y1), Y1<X1;
mostCared(X,Y,Y) :- care(X,X1), care(Y,Y1);

:Initial Goals:


:Plans:
+!doTasks[achieve] : {~B actionReady} <- *actionReady;
+!doTasks[achieve] : {B actionReady} <- getPossibleTasks(Out), getViableTasks(Out), selectMostCared(Out), do(Out);
//Manage lists
+!addList(res,Res)[perform] : {B responsibilities(L)} <- +.lock, -responsibilities(L), addResItem(res,L,Out), +responsibilities(Out), -.lock;
+!remList(res,Res)[perform] : {B responsibilities(L)} <- +.lock, -responsibilities(L), deleteItem(Res,L,Out), +responsibilities(Out), -.lock;

//Add new responsibility
+!incomingRes(Assignee,[Res])[perform] : {B capacity(Res)} <- +!addList(res,Res)[perform], +!reportOutcome(yes,Assignee,Res)[perform];
+!incomingRes(Assignee,[Res])[perform] : {~B capacity(Res)} <- +!reportOutcome(no,Assignee,Res)[perform];

//Messages to send back
+!reportOutcome(_, [], Res)[perform] : {True} <- prt("Reported accepted to all");
+!reportOutcome(yes, [Assignee|T], Res)[perform] : {True} <- prt("Reporting acceptance to ", Assignee), .send(Assignee, :tell, accepted(Res, cleaner)), +!reportOutcome(yes,T,Res)[perform];
+!reportOutcome(yes, Assignee, Res)[perform] : {True} <- prt("Reporting acceptance to ", Res, " to ", Assignee), .send(Assignee, :tell, accepted(Res, cleaner));
+!reportOutcome(no, [Assignee|T], Res)[perform] : {True} <- prt("Reporting rejection to ", Assignee), .send(Assignee, :tell, rejected(Res, cleaner)), +!reportOutcome(yes,T,Res)[perform];
+!reportOutcome(no, Assignee, Res)[perform] : {True} <- prt("Reporting rejection to ", Res, " to ", Assignee), .send(Assignee, :tell, rejected(Res, cleaner));

//Received a delegated responsibility Example: assignment([ag1,ag2],safety)
+.received(:tell, assignment(Assignee,Res)) : {True} <- prt("Received Assignment"), +!incomingRes(Assignee,[Res])[perform];
+.received(:tell, accepted(Res,Assignee)) : {True} <- prt("Received ", accepted(Res,Assignee)), -waiting(Res,Assignee), +delegated(Res,Assignee);
+.received(:tell, finished(sendStatus)) : {True} <- +!addList(don,sendStatus)[perform];
+.received(:tell, finished(Task)) : {True} <- -busy, +!addList(don,Task)[perform];
+.received(:tell, X) : {True} <- print(X), printstate, break;

//Specific Actions & states
+!actions(Res,[])[perform] : {True} <- prt("All actions done");
+!actions(Res,[H|T])[perform] : {True} <- prt("Doing action ", H), +!action(H)[perform], +actions(Res,[T]);

+!action(sendStatus)[perform] : {~B busy} <- prt("Send Report to Manager"), .send(manager, :tell, status(notbusy)), addToFinishedTasks(sendStatus);
+!action(sendStatus)[perform] : {B busy} <- prt("Send Report to Manager"), .send(manager, :tell, status(busy)), addToFinishedTasks(sendStatus);
+!action(cleanroomF)[perform] : {~B busy} <- +busy, goToZone("F"), clean("F"), addToFinishedTasks(cleanRoomF);
+!action(AnyAction)[perform] : {B busy} <- prt("currently working");
+!action(AnyAction)[perform] : {True} <- prt("Action ", anyAction, " not recognised");

