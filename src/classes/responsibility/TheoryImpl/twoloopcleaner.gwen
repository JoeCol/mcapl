GWENDOLEN

:name: cleaner

:Initial Beliefs:
//Possible Tasks task(name, [goals/actions], [statesOfTheWorld])
task(cleanroomA, [cleanroomA], [])
task(cleanroomB, [cleanroomB], [])
task(cleanroomC, [cleanroomC], [])
task(cleanroomD, [cleanroomD], [])
task(cleanroomE, [cleanroomE], [])
task(cleanroomF, [cleanroomF], [])
task(cleanroomG, [cleanroomG], [])
task(cleanroomH, [cleanroomH], [])
task(cleanroomI, [cleanroomI], [])
task(cleanroomJ, [cleanroomJ], [])

task(sendStatus, [sendStatus], [])
 
//Possible Responsibilities res(name, [subres], task, [failres], {oneshot,repeat})
res(report, [], sendStatus, [], repeat)

res(cleanA, [], cleanroomA, [], oneshot)
res(cleanB, [], cleanroomB, [], oneshot)
res(cleanC, [], cleanroomC, [], oneshot)
res(cleanD, [], cleanroomD, [], oneshot)
res(cleanE, [], cleanroomE, [], oneshot)
res(cleanF, [], cleanroomF, [], oneshot)
res(cleanG, [], cleanroomG, [], oneshot)
res(cleanH, [], cleanroomH, [], oneshot)
res(cleanI, [], cleanroomI, [], oneshot)
res(cleanJ, [], cleanroomJ, [], oneshot)

res(cleanBadDirtA, [], cleanroomA, [], oneshot)
res(cleanBadDirtB, [], cleanroomB, [], oneshot)
res(cleanBadDirtC, [], cleanroomC, [], oneshot)
res(cleanBadDirtD, [], cleanroomD, [], oneshot)
res(cleanBadDirtE, [], cleanroomE, [], oneshot)
res(cleanBadDirtF, [], cleanroomF, [], oneshot)
res(cleanBadDirtG, [], cleanroomG, [], oneshot)
res(cleanBadDirtH, [], cleanroomH, [], oneshot)
res(cleanBadDirtI, [], cleanroomI, [], oneshot)
res(cleanBadDirtJ, [], cleanroomJ, [], oneshot)

//care values
care(cleanA,1)
care(cleanBadDirtA,10)
care(cleanB,1)
care(cleanBadDirtB,10)
care(cleanC,1)
care(cleanBadDirtC,10)
care(cleanD,1)
care(cleanBadDirtD,10)
care(cleanE,1)
care(cleanBadDirtE,10)
care(cleanF,1)
care(cleanBadDirtF,10)
care(cleanG,1)
care(cleanBadDirtG,10)
care(cleanH,1)
care(cleanBadDirtH,10)
care(cleanI,1)
care(cleanBadDirtI,10)
care(cleanJ,1)
care(cleanBadDirtJ,10)

care(report,0)

//Capacity - In essence pre-computed
capacity(cleanA)
capacity(cleanBadDirtA)
capacity(cleanB)
capacity(cleanBadDirtB)
capacity(cleanC)
capacity(cleanBadDirtC)
capacity(cleanD)
capacity(cleanBadDirtD)
capacity(cleanE)
capacity(cleanBadDirtE)
capacity(cleanF)
capacity(cleanBadDirtF)
capacity(cleanG)
capacity(cleanBadDirtG)
capacity(cleanH)
capacity(cleanBadDirtH)
capacity(cleanI)
capacity(cleanBadDirtI)
capacity(cleanJ)
capacity(cleanBadDirtJ)

capacity(report)

//Current Responsibilities
responsibilities([])
workingOn([])

sfree
:Reasoning Rules:
allTasks([],[]);
allTasks([H|T], [Tasks|OtherTasks]) :- res(H, _, Name, _, _), task(Name,[Tasks],_), allTasks(T,OtherTasks);

resIn(Res,[],false);
resIn(H,[H],true);
resIn(H,[H|T],true);
resIn(H,[H1|T],Out) :- resInFin(H,T,Out);

free :- responsibilities([report]);
free :- responsibilities([]);
:Initial Goals:
preRes[achieve]
//test[perform]

:Plans:
+!test[perform] : {True} <- .send(cleaner1, :tell, assignment(initial,report)), .send(cleaner1, :tell, assignment(manager,cleanD)), +!preRes[achieve];
//Test getting tasks
//+!test[perform] : {B allTasks([report,cleanA,cleanB,cleanBadDirtC,cleanBadDirtA],Out)} <- prt(Out);

//+!test(1)[perform] : {B resInFin(cleanA,[report,cleanA],true)} <- prt("Works for last item"), +!test(2)[perform];
//+!test(2)[perform] : {B resInFin(cleanB,[report,cleanA],false)} <- prt("Works for false"), +!test(3)[perform];
//+!test(3)[perform] : {B resInFin(cleanB,[report,cleanA],A)} <- prt("Result ", A), +!test(4)[perform];
//+!test(4)[perform] : {B resInFin(cleanA,[report,cleanA],A)} <- prt("Result ", A);

//Resent the assignment to myself for responsibilities that repeat
+!resendRes(Res)[perform] : {B assignment(Assignee,Res)} <- getName(Name), .send(Name, :tell, assignment(Assignee,Res));

//Finish Res
+!finishRes([])[perform] : {True} <- prt("All finished checked");
+!finishRes(Res)[perform] : {B res(Res,_,_,_,oneshot)} <- prt("Res Done"), +!remRes(Res)[perform], +!remWrk(Res)[perform]; 
+!finishRes(Res)[perform] : {B res(Res,_,_,_,repeat)} <- prt("Res Done"), +!remRes(Res)[perform], +!remWrk(Res)[perform], +!resendRes(Res)[perform]; 
+!finishRes(Res)[perform] : {True} <- prt("Res not done"); 

+!failedRes(Res)[perform] : {True} <- prt("Res failed"), +!remList(Res)[perform], +!remWrk(Res)[perform]; 

+!do(Res,[])[perform] : {True} <- prt("All actions done ", Res);
+!do(Res,[H|T])[perform] : {B workingOn(Wrk), B resIn(Res,Wrk,true)} <- prt("Working On");
+!do(Res,[H|T])[perform] : {B actionReady} <- +!action(Res,H)[perform], +!do(Res,T)[perform];
+!do(Res,[H|T])[perform] : {~B actionReady} <- prt("Interrupted");

//Do responsibility
+!doRes([])[perform] : {True} <- prt("done all res");
+!doRes([H|T])[perform] : {B actionReady, B res(H,_,none,_,_)} <- prt("No task with ", H), +!doRes(T)[perform];
+!doRes([H|T])[perform] : {B actionReady, B res(H,_,TName,_,_), B task(TName,[Task],[State])} <- +!do(H,[Task|State])[perform], +!doRes(T)[perform];
+!doRes([H|T])[perform] : {B actionReady, B res(H,_,TName,_,_), B task(TName,Task,[])} <- +!do(H,Task)[perform], +!doRes(T)[perform];
+!doRes([H|T])[perform] : {B actionReady, B res(H,_,TName,_,_), B task(TName,[],State)} <- +!do(H, State)[perform], +!doRes(T)[perform];
+!doRes([H|T])[perform] : {~B actionReady} <- prt("Interrupted");

//Prepare task list
+!preRes[achieve] : {~B actionReady} <- *actionReady;
+!preRes[achieve] : {B actionReady, B responsibilities([])} <- -actionReady;
+!preRes[achieve] : {B actionReady, B responsibilities(Res)} <- prt("Now Ready"), getViable(Res,Viable), prt(Viable), selectCared(Viable,Out), prt(Out), +!doRes(Out)[perform], -actionReady;

//Manage lists
+!addRes(Res)[perform] : {B responsibilities(L)} <- +.lock, -responsibilities(L), addResItem(Res,L,Out), +responsibilities(Out), -.lock;
+!remRes(Res)[perform] : {B responsibilities(L)} <- +.lock, -responsibilities(L), deleteItem(Res,L,Out), +responsibilities(Out), -.lock;
+!addWrk(Res)[perform] : {B workingOn(L)} <- +.lock, -workingOn(L), addItem(Res,L,Out), +workingOn(Out), -.lock;
+!remWrk(Res)[perform] : {B workingOn(L)} <- +.lock, -workingOn(L), deleteItem(Res,L,Out), +workingOn(Out), -.lock;

//Add new responsibility
+!incomingRes(Assignee,[Res])[perform] : {B capacity(Res)} <- -actionReady, +.lock, +assignment(Assignee,Res), +!addRes(Res)[perform], +!reportOutcome(yes,Assignee,Res)[perform], -.lock, +actionReady;
+!incomingRes(Assignee,[Res])[perform] : {~B capacity(Res)} <- +!reportOutcome(no,Assignee,Res)[perform];

+!processRes(Assignee,[])[perform] : {B responsibilities(H)} <- prt("Done have ", H);
+!processRes(Assignee,[Res])[perform] : {B res(Res,[],_,_,_)} <- prt("Adding ", Res), +!incomingRes(Assignee,[Res])[perform];
+!processRes(Assignee,[Res|T])[perform] : {B res(Res,SubRes,_,_,_)} <- prt("Adding ", Res), +!incomingRes(Assignee,[Res])[perform], +!processRes(Assignee,T)[perform], +!processRes(Assignee,SubRes)[perform];

//Messages to send back
+!reportOutcome(_, [], Res)[perform] : {True} <- prt("Reported accepted to all");
+!reportOutcome(yes, [Assignee|T], Res)[perform] : {True} <- prt("Reporting acceptance to ", Assignee), .send(Assignee, :tell, accepted(Res, cleaner)), +!reportOutcome(yes,T,Res)[perform];
+!reportOutcome(yes, Assignee, Res)[perform] : {True} <- prt("Reporting acceptance to ", Res, " to ", Assignee), .send(Assignee, :tell, accepted(Res, cleaner));
+!reportOutcome(no, [Assignee|T], Res)[perform] : {True} <- prt("Reporting rejection to ", Assignee), .send(Assignee, :tell, rejected(Res, cleaner)), +!reportOutcome(yes,T,Res)[perform];
+!reportOutcome(no, Assignee, Res)[perform] : {True} <- prt("Reporting rejection to ", Res, " to ", Assignee), .send(Assignee, :tell, rejected(Res, cleaner));

//Received a delegated responsibility Example: assignment([ag1,ag2],safety)
+.received(:tell, assignment(Assignee,Res)) : {True} <- prt("Received Assignment ", Res), -actionReady, +.lock, +!processRes(Assignee,[Res])[perform], -.lock, +actionReady;
+.received(:tell, accepted(Res,Assignee)) : {True} <- prt("Received ", accepted(Res,Assignee)), -waiting(Res,Assignee), +delegated(Res,Assignee);
+.received(:tell, finished(Res)) : {True} <- +.lock, prt("Received Finish ", Res), +!finishRes(Res)[perform], -.lock, +actionReady;
+.received(:tell, failed(Res)) : {True} <- +.lock, +!failedRes(Res)[perform], -.lock, +actionReady;
+.received(:tell, X) : {True} <- prt(X), printstate, break;

//Specific Actions & states
+!sendReport[perform] : {~B free, B sfree} <- getName(Name), prt("sending ", Name, " busy"), -sfree, .send(manager,:tell, busy(Name,true)), .send(Name,:tell,finished(report));
+!sendReport[perform] : {~B free, ~B sfree} <- prt("last sent im busy"), .send(Name,:tell,finished(report));
+!sendReport[perform] : {B free, ~B sfree} <- getName(Name),prt("sending ", Name, " free"), +sfree, .send(manager,:tell, busy(Name,false)), .send(Name,:tell,finished(report));
+!sendReport[perform] : {B free, B sfree, B responsibilities(X)} <- prt("last sent im free ", X);

+!action(Res,sendStatus)[perform] : {True} <- prt("Send Report to Manager ", B), +!sendReport[perform];
+!action(Res,cleanroomA)[perform] : {True} <- clearActions, doing(Res), goToZone("A"), clean("A"), addFin;
+!action(Res,cleanroomB)[perform] : {True} <- clearActions, doing(Res), goToZone("B"), clean("B"), addFin;
+!action(Res,cleanroomC)[perform] : {True} <- clearActions, doing(Res), goToZone("C"), clean("C"), addFin;
+!action(Res,cleanroomD)[perform] : {True} <- clearActions, doing(Res), goToZone("D"), clean("D"), addFin;
+!action(Res,cleanroomE)[perform] : {True} <- clearActions, doing(Res), goToZone("E"), clean("E"), addFin;
+!action(Res,cleanroomF)[perform] : {True} <- clearActions, doing(Res), goToZone("F"), clean("F"), addFin;
+!action(Res,cleanroomG)[perform] : {True} <- clearActions, doing(Res), goToZone("G"), clean("G"), addFin;
+!action(Res,cleanroomH)[perform] : {True} <- clearActions, doing(Res), goToZone("H"), clean("H"), addFin;
+!action(Res,cleanroomI)[perform] : {True} <- clearActions, doing(Res), goToZone("I"), clean("I"), addFin;
+!action(Res,cleanroomJ)[perform] : {True} <- clearActions, doing(Res), goToZone("J"), clean("J"), addFin;
+!action(Res,AnyAction)[perform] : {True} <- prt("Action ", AnyAction, " not recognised for Res ", Res);

