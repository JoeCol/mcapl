GWENDOLEN

:name: manager

:Initial Beliefs:
//Cleaning responsibility actions
res(clean, delegate, agent1)
res(hoover, delegate, agent1)
res(observeDirt, delegate, manager)

//Safety responsibility actions
res(safety, delegate, manager)
res(observeSafe, observe, null)

//Tree nodes for responsibilities
resTree(cleaning, [clean, hoover, observeDirt])
resTree(clean, [])
resTree(hoover, [])
resTree(observeDirt, [])

resTree(safety, [observeSafe])
resTree(observeSafe, [])

:Reasoning Rules:

:Initial Goals:
resolveRes([safety, cleaning])[perform]

:Plans: 

//Add Responsibility
+!addResponsibility([])[perform] : {True} <- +!resolveRes[perform];
+!addResponsibility([H|T])[perform] : {B responsibilities(L)} <- print(L), -responsibilities(L), +responsibilities([H|L]), +!addResponsibility(T)[perform];
+!addResponsibility(X)[perform] : {B responsibilities(L)} <- print(X), -responsibilities(L), +responsibilities([X|L]);
//If no responsibilities
+!addResponsibility([H|T])[perform] : {True} <- +responsibilities([H]), +!addResponsibility(T)[perform];
+!addResponsibility(X)[perform] : {True} <- +responsibilities([X]);

//Received a delegated responsibility
+.received(:tell, X): {True} <- +!addResponsibility(X)[perform];

//Observe Dirt
+!observe[achieve] : {B observed(X)} <- +!resolveRes([clean(X)]);
+!observe[achieve] : {B readyToObserve} <- observeDirt;
+!observe[achieve] : {True} <- goToRandomZone;

//Delegate
+!delegate(X,Ags)[perform] : {True} <- .send(Ags,:tell,X);

//Responsilibilty Actions
+!doRes(H)[perform] : {B res(H, delegate, Ags} <- +!delegate(H, Ags)[perform];
+!doRes(H)[perform] : {B res(H, observe, null} <- +!observe[achieve]);

//Resolve responsibility Responsibility
+!resolveRes([H|T])[perform] : {B resTree(H,[])} <- print(H), +!doRes(H)[perform], +!resolveRes(T)[perform];
+!resolveRes([H|T])[perform] : {B resTree(H, N)} <- print(H), append(N,T,Z), +!resolveRes(Z)[perform];
+!resolveRes(H)[perform] : {True} <- print(H), print("Last Item");
+!resolveRes([])[perform] : {True} <- print("Nothing");